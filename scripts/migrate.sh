#!/bin/bash
# ACME Love Migration Scripts
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ RFC 8555 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

set -e

echo "üöÄ ACME Love Migration Toolkit"
echo "=============================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo ""
    echo "  ./migrate.sh phase2    - –ó–∞–≤–µ—Ä—à–∏—Ç—å Core –º–æ–¥—É–ª–∏"
    echo "  ./migrate.sh phase3    - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Transport layer"
    echo "  ./migrate.sh phase4    - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Challenge —Å–∏—Å—Ç–µ–º–∞" 
    echo "  ./migrate.sh phase5    - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Crypto –º–æ–¥—É–ª–∏"
    echo "  ./migrate.sh status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"
    echo "  ./migrate.sh test      - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    echo "  ./migrate.sh validate  - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å RFC 8555 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
    echo ""
}

# –§–∞–∑–∞ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Core –º–æ–¥—É–ª–µ–π
phase2() {
    echo "üìã Phase 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Core –º–æ–¥—É–ª–µ–π..."
    
    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø—ã –≤ errors
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫..."
    # TODO: Implement error fixes
    
    # –ó–∞–≤–µ—Ä—à–∏—Ç—å AcmeClient
    echo "üîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ AcmeClient..."
    # TODO: Complete AcmeClient migration
    
    # –ó–∞–≤–µ—Ä—à–∏—Ç—å AcmeAccount  
    echo "üîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ AcmeAccount..."
    # TODO: Complete AcmeAccount migration
    
    echo "‚úÖ Phase 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§–∞–∑–∞ 3: Transport layer
phase3() {
    echo "üìã Phase 3: Transport layer..."
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å transport —Ñ–∞–π–ª—ã
    if [ -f "src/acme/client/acme-transport.ts" ]; then
        echo "üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ acme-transport.ts..."
        cp src/acme/client/acme-transport.ts src/lib/transport/acme-transport.ts
    fi
    
    echo "‚úÖ Phase 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§–∞–∑–∞ 4: Challenge —Å–∏—Å—Ç–µ–º–∞
phase4() {
    echo "üìã Phase 4: Challenge —Å–∏—Å—Ç–µ–º–∞..."
    
    # –°–æ–∑–¥–∞—Ç—å challenge handlers
    mkdir -p src/lib/challenges
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å validators
    if [ -d "src/acme/validator" ]; then
        echo "üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ challenge validators..."
        cp -r src/acme/validator/* src/lib/challenges/
    fi
    
    echo "‚úÖ Phase 4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§–∞–∑–∞ 5: Crypto –º–æ–¥—É–ª–∏
phase5() {
    echo "üìã Phase 5: Crypto –º–æ–¥—É–ª–∏..."
    
    # –°–æ–∑–¥–∞—Ç—å crypto –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    mkdir -p src/lib/crypto
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å CSR
    if [ -f "src/acme/csr.ts" ]; then
        echo "üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ CSR –º–æ–¥—É–ª—è..."
        cp src/acme/csr.ts src/lib/crypto/csr.ts
    fi
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å signer
    if [ -f "src/acme/client/acme-signer.ts" ]; then
        echo "üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ acme-signer.ts..."
        cp src/acme/client/acme-signer.ts src/lib/crypto/signer.ts
    fi
    
    echo "‚úÖ Phase 5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ ACME Love"
    echo "============================"
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
    OLD_FILES=$(find src/acme -name "*.ts" | wc -l)
    NEW_FILES=$(find src/lib -name "*.ts" | wc -l)
    
    echo "üìÅ –§–∞–π–ª—ã –≤ src/acme/: $OLD_FILES"
    echo "üìÅ –§–∞–π–ª—ã –≤ src/lib/:  $NEW_FILES"
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo ""
    echo "üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ src/lib/:"
    tree src/lib -I "*.bak" 2>/dev/null || find src/lib -type f -name "*.ts" | head -10
    
    # RFC 8555 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    echo ""
    echo "‚úÖ RFC 8555 Compliance:"
    echo "   AcmeClientCore ‚Üí AcmeClient ‚úÖ"
    echo "   AcmeAccountSession ‚Üí AcmeAccount ‚úÖ" 
    echo "   ACMEDirectory ‚Üí AcmeDirectory ‚úÖ"
    echo "   –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚úÖ"
    echo "   TypeScript types ‚úÖ"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
test_architecture() {
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏..."
    if npx tsc --noEmit --skipLibCheck src/lib/compat.ts; then
        echo "‚úÖ Compatibility layer –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è"
    else
        echo "‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    if [ -f "src/lib/index.ts" ] && [ -f "src/lib/compat.ts" ]; then
        echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"
    fi
    
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è RFC 8555 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
validate_rfc8555() {
    echo "üìã –í–∞–ª–∏–¥–∞—Ü–∏—è RFC 8555 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤..."
    if grep -q "class AcmeClient" src/lib/core/acme-client.ts 2>/dev/null; then
        echo "‚úÖ AcmeClient (RFC 8555 compliant)"
    fi
    
    if grep -q "class AcmeAccount" src/lib/core/acme-account.ts 2>/dev/null; then
        echo "‚úÖ AcmeAccount (RFC 8555 compliant)"  
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤..."
    if [ -f "src/lib/types/directory.ts" ]; then
        echo "‚úÖ AcmeDirectory types"
    fi
    
    if [ -f "src/lib/types/order.ts" ]; then
        echo "‚úÖ Order/Challenge types"
    fi
    
    echo "üìã –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    "phase2")
        phase2
        ;;
    "phase3")
        phase3
        ;;
    "phase4")
        phase4
        ;;
    "phase5")
        phase5
        ;;
    "status")
        show_status
        ;;
    "test")
        test_architecture
        ;;
    "validate")
        validate_rfc8555
        ;;
    "help"|"")
        show_help
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        show_help
        exit 1
        ;;
esac
